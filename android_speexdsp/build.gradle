apply plugin: 'com.android.library'
apply plugin: 'maven-publish'
apply plugin: 'signing'

android {
    compileSdkVersion 28
    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        externalNativeBuild {
            cmake {
                //cppFlags '-DFIXED_POINT', '-DUSE_KISS_FFT -DJNIIMPORT="" -UHAVE_CONFIG_H'
                abiFilters "arm64-v8a", "armeabi-v7a"
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
            version "3.10.2"
        }
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['jniLibs']
        }
    }
    lintOptions {
        abortOnError false
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
}

task androidJavadocs(type: Javadoc) {
    failOnError false
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    android.libraryVariants.all { variant ->
        if (variant.name == 'release') {
            owner.classpath += variant.javaCompile.classpath
        }
    }
    exclude '**/R.html', '**/R.*.html', '**/index.html'
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

def libVersion = '1.0.0-SNAPSHOT'
ext.isReleaseVersion = !libVersion.endsWith("SNAPSHOT")
publishing {
    publications {
        aar(MavenPublication) {
            groupId 'io.github.sundoggynew'
            artifactId 'iot-speexdsp'
            version libVersion
            artifact(androidSourcesJar)
            artifact(androidJavadocsJar)
            artifact file('build/outputs/aar/android_speexdsp-release.aar')

            pom {
                name = 'iot speexdsp'
                description = 'Speexdsp Android library'
                url = 'https://github.com/SundoggyNew/iot-speexdsp'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://github.com/SundoggyNew/iot-speexdsp/blob/master/LICENSE'
                    }
                }
                developers {
                    developer {
                        id = 'whalensun'
                        name = 'whalensun'
                        email = '532125505@qq.com'
                    }
                }
                scm {
                    url = 'scm:git@github.com:SundoggyNew/iot-speexdsp.git'
                    connection = 'scm:git@github.com:SundoggyNew/iot-speexdsp.git'
                    developerConnection = 'scm:git@github.com:SundoggyNew/iot-speexdsp.git'
                }
            }

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.implementation.allDependencies.withType(ModuleDependency) { ModuleDependency dp ->
                    if (dp.version != "unspecified") { // 过滤项目内library引用
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', dp.group)
                        dependencyNode.appendNode('artifactId', dp.name)
                        dependencyNode.appendNode('version', dp.version)

                        // for exclusions
                        if (dp.excludeRules.size() > 0) {
                            def exclusions = dependencyNode.appendNode('exclusions')
                            dp.excludeRules.each { ExcludeRule ex ->
                                def exclusion = exclusions.appendNode('exclusion')
                                exclusion.appendNode('groupId', ex.group)
                                exclusion.appendNode('artifactId', ex.module)
                            }
                        }
                    }
                }
            }
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
            url = libVersion.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = System.getenv("IOT_SONATYPE_USERNAME")
                password = System.getenv("IOT_SONATYPE_PASSWORD")
            }
        }
    }
}

signing {
    if (isReleaseVersion) {
        sign publishing.publications.aar
    }
}
